import logging

import asyncio
import time

from typing import Callable, Any, Dict, Awaitable

from aiogram import Router, F, BaseMiddleware
from aiogram.types import Message, CallbackQuery, TelegramObject
from aiogram.filters import CommandStart, Command
from aiogram.fsm.context import FSMContext

from app.administrator.keyboards import admin_panel_kb
import app.states as st
from config import STUDENT_CF, DENSITY
import app.database.requests as db_req
import app.user.keyboards as kb


logger = logging.getLogger(__name__)

user = Router()

# –ö—ç—à —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –¥–µ–¥–ª–∞–π–Ω–æ–≤
user_cache, dedlines, dedline_notifications = dict(), [], []

# –ú–∏–¥–ª–≤–∞—Ä—å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
class AdminMiddleware(BaseMiddleware):
    async def __call__(
            self,
            handler: Callable[[TelegramObject, Dict[str, Any]], Awaitable[Any]],
            event: TelegramObject,
            data: Dict[str, Any]
    ) -> Any:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
        if isinstance(event, (Message, CallbackQuery)):
            user_tg_id = event.from_user.id

            ''' –ó–¥–µ—Å—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –Ω–µ–ª–æ–≥–∏—á–Ω—ã–π –∫–æ–¥, –æ–Ω —á–∏—Å—Ç–æ –¥–ª—è –ø–µ—Ä–µ—Å—Ç—Ä–∞—Ö–æ–≤–∫–∏, –µ—Å–ª–∏ –≤–¥—Ä—É–≥
            –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –≤—Ö–æ–¥–µ —á—Ç–æ-—Ç–æ –ø–æ–π–¥–µ—Ç –Ω–µ —Ç–∞–∫ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î.
            –¢–∞–∫–∂–µ –ø–µ—Ä–µ—Å—Ç—Ä–∞—Ö–æ–≤–∫–∞ –ø–æ –ø–æ–≤–æ–¥—É –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞  '''

            if user_tg_id not in user_cache:
                # –í–æ—Ç —ç—Ç–æ –æ–±—Ä–∞—â–µ–Ω–∏–µ –∫ –ë–î –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
                user = await db_req.get_or_create_user(event.from_user)
                if not user:
                    if isinstance(event, CallbackQuery) and event.data == "registration":
                        return await handler(event, data)  # –ø–µ—Ä–µ–¥–∞—á–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ö–∞–Ω–¥–ª–µ—Ä–∞–º
                    else:
                        await registration(event)
                        return
                user_cache[user_tg_id] = user

        # –ü–µ—Ä–µ–¥–∞–µ–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–ª–µ–¥—É—é—â–µ–º—É –æ–±—Ä–∞–±–æ—Ç—á–∏–∫—É
        return await handler(event, data)

user.message.middleware(AdminMiddleware())
user.callback_query.middleware(AdminMiddleware())


# –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π
async def delete_message(message: Message):
    try:
        await message.delete()
    except Exception:
        return


# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
async def registration(event: Message | CallbackQuery):
    username = event.from_user.username
    event_message = event.message if isinstance(event, CallbackQuery) else event
    if username:
        await event_message.answer(
            '–†–∞–¥—ã –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –≤ –Ω–∞—à–µ–º —á–∞—Ç-–±–æ—Ç–µ –ò–ù–•–ùüòä.\n'
            "–î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —ç—Ç–∏–º –±–æ—Ç–æ–º –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.\n"
            "–ü—Ä–∏ —ç—Ç–æ–º –Ω–∞–∂–∏–º–∞—è –Ω–∞ –∫–Ω–æ–ø–∫—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏, –í—ã —Å–æ–≥–ª–∞—à–∞–µ—Ç–µ—Å—å —Å–æ –≤—Å–µ–º–∏ —É—Å–ª–æ–≤–∏—è–º–∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è "
            '–ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Å–≤–æ–µ–≥–æ —Ç–µ–ª–µ–≥—Ä–∞–º–º –∞–∫–∫–∞—É–Ω—Ç–∞ –∏ –∏–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ —Å–æ–≥–ª–∞—à–µ–Ω–∏—è, '
            '–æ–ø–∏—Å–∞–Ω–Ω—ã—Ö <a href="https://disk.yandex.ru/i/J4i-dcxqrgKCPw"><b>–∑–¥–µ—Å—å</b></a>.',
            reply_markup=kb.registration_kb)
    else:
        await event_message.answer(
            "–°–æ–∂–∞–ª–µ–µ–º, –Ω–æ —É –í–∞—Å –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –Ω–∏–∫–Ω–µ–π–º (username) —Ç–µ–ª–µ–≥—Ä–∞–º–º ü•∫\n"
            "‚ÑπÔ∏è –ö–∞–∫ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–∏–∫–Ω–µ–π–º (username):\n"
            "1. –û—Ç–∫—Ä–æ–π—Ç–µ '–ù–∞—Å—Ç—Ä–æ–π–∫–∏' Telegram\n"
            "2. –í—ã–±–µ—Ä–∏—Ç–µ '–ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å'\n"
            "3. –í –ø–æ–ª–µ 'Username' —É–∫–∞–∂–∏—Ç–µ –∂–µ–ª–∞–µ–º—ã–π –Ω–∏–∫–Ω–µ–π–º\n"
            "4. –ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ –≤–æ–∑–≤—Ä–∞—â–∞–π—Ç–µ—Å—å –≤ –±–æ—Ç–∞!‚ò∫Ô∏è"
        )


@user.callback_query(F.data=='registration')
async def registration_callback_query(call: CallbackQuery):
    try:
        async def inner_registration_callback_query():
            await db_req.get_or_create_user(from_user=call.from_user, create_user=True)

            # –ß–∞—Å—Ç–∏—á–Ω–æ–µ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç start
            text = (
                '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à —á–∞—Ç-–±–æ—Ç –ò–ù–•–ù ‚ù§Ô∏è\n'
                f'–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å –∑–¥–µ—Å—å, –∫–∞–∫ <i><b>{call.from_user.first_name}</b></i>. '
                f'–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –ø–æ–º–µ–Ω—è—Ç—å —Å–≤–æ—ë –∏–º—è, —Ç–æ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ <b>/prof</b>\n'
                '–ó–¥–µ—Å—å –í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–π—Ç–∏ —É–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—É—é –≤–∏–∫—Ç–æ—Ä–∏–Ω—É –∏ –ø–æ–¥—Ä–æ–±–Ω–µ–µ –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è '
                '—Å –Ω–∞—à–∏–º–∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—è–º–∏‚ò∫Ô∏è\n'
                '–ê–¥–º–∏–Ω—ã –º–æ–≥—É—Ç –¥–æ–±–∞–≤–ª—è—Ç—å –≤–æ–ø—Ä–æ—Å—ã –¥–ª—è –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã.\n'
                '–î–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º, –≤—ã–±–∏—Ä–∞–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã –º–µ–Ω—é —Å–ª–µ–≤–∞ –≤–Ω–∏–∑—É.\n'
                '‚ÜôÔ∏è'
            )
            await call.message.answer(text, parse_mode='HTML')

        await asyncio.gather(delete_message(call.message), inner_registration_callback_query())
    except Exception as e:
        await call.message.answer('–°–æ–∂–∞–ª–µ–µ–º! –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ ü•∫')
        logger.error(f'ERROR from registration_callback_query: {e}')


# ----- –û–ë–†–ê–ë–û–¢–ö–ê /start -----------

@user.message(CommandStart())
async def start(call_mess: Message | CallbackQuery, state: FSMContext):
    call_mess = call_mess.message if isinstance(call_mess, CallbackQuery) else call_mess
    async def inner_start():
        text = (
            '–ó–¥–µ—Å—å –í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–π—Ç–∏ —É–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—É—é –≤–∏–∫—Ç–æ—Ä–∏–Ω—É –∏ –ø–æ–¥—Ä–æ–±–Ω–µ–µ –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è '
            '—Å –Ω–∞—à–∏–º–∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—è–º–∏‚ò∫Ô∏è\n'
            '–ê–¥–º–∏–Ω—ã –º–æ–≥—É—Ç –¥–æ–±–∞–≤–ª—è—Ç—å –≤–æ–ø—Ä–æ—Å—ã –¥–ª—è –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã.\n'
            '–î–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º, –≤—ã–±–∏—Ä–∞–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã –º–µ–Ω—é —Å–ª–µ–≤–∞ –≤–Ω–∏–∑—É.\n'
            '‚ÜôÔ∏è'
        )
        await call_mess.answer(text)
    await asyncio.gather(delete_message(call_mess), inner_start())


# –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å
@user.message(Command('adm'))
async def adm(message: Message):
    async def answer():
        await message.answer('–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å', reply_markup=admin_panel_kb)
    await asyncio.gather(delete_message(message), answer())

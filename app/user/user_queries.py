import logging

from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import CommandStart, Command
from aiogram.fsm.context import FSMContext

import app.user.keyboards as kb_user
import app.states as st
from config import STUDENT_CF, DENSITY
import app.database.requests as db_reg


logger = logging.getLogger(__name__)

user = Router()


# ----- –û–ë–†–ê–ë–û–¢–ö–ê /start -----------
@user.message(CommandStart())
async def start(message: Message):
    text = ('–†–∞–¥—ã –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –≤ –Ω–∞—à–µ–º —á–∞—Ç-–±–æ—Ç–µ –ò–ù–•–ùüòä. '
            '–ó–¥–µ—Å—å –º–æ–∂–µ—Ç–µ:\n'
            '1. –ü—Ä–æ–≤–µ—Å—Ç–∏ –º–µ—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫—É—é –æ—Ü–µ–Ω–∫—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏–∑–º–µ—Ä–µ–Ω–∏–π.\n'
            '2. –†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Ä–µ—Ü–µ–ø—Ç—É—Ä—É –¥–ª—è –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è —Ä–∞—Å—Ç–≤–æ—Ä–æ–≤ –∫–∏—Å–ª–æ—Ç –∏ –æ—Å–Ω–æ–≤–∞–Ω–∏–π.\n'
            # '3. –ò –∫–æ–Ω–µ—á–Ω–æ –ø—Ä–æ–π—Ç–∏ —É–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–π –æ–ø—Ä–æ—Å-–≤–∏–∫—Ç–æ—Ä–∏–Ω—É'
            )
    await message.answer(text)


@user.message(Command(commands=['mtr']))
async def begin_metrology(message: Message, state: FSMContext):
    await state.clear()
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç—å",
                         reply_markup=await kb_user.reliability_kb())


@user.callback_query(F.data.startswith('reliability'))
async def reliability_callback(call: CallbackQuery, state: FSMContext):
    reliability = call.data.split('_')[1]
    await state.update_data(reliability=reliability)
    await call.message.answer(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç—å {reliability}.\n"
                              "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —á–µ—Ä–µ–∑ —Å–ª–µ—à –∑–Ω–∞—á–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏–∑–º–µ—Ä–µ–Ω–∏–π.\n"
                              "–ù–∞–ø—Ä–∏–º–µ—Ä: <i>0.502/0.504/0.503/0.501/0.505</i>\n"
                              "‚ùóÔ∏è–ß–∏—Å–ª–æ –¥–∞–Ω–Ω—ã—Ö –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç <b>2 –¥–æ 10!</b>",
                              parse_mode="HTML")
    await state.set_state(st.MetrologyFSM.measurements)


@user.message(st.MetrologyFSM.measurements)
async def finish_metrology(message: Message, state: FSMContext):
    try:
        text = message.text.replace(" ", "").replace(",", ".").split("/")

        # –ü–µ—Ä–µ–¥–µ–ª–∫–∞ —Å–ø–∏—Å–∫–∞ –ø–æ–¥ —á–∏—Å–ª–æ–≤–æ–π —Ñ–æ—Ä–º–∞—Ç
        lst = [float(i) for i in text]
        logger.info(lst)
        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Å–ø–∏—Å–∫–∞ –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
        if len(text)>1 and len(text)<11:
            data = await state.get_data()
            reability, n = data["reliability"], len(text)
            student = STUDENT_CF[reability][str(n)]
            n = len(lst)
            average = sum(lst)/n
            sum_dev = sum(map(lambda x: (x-average)**2, lst))
            eps = (sum_dev/(n*(n-1)))**0.5*student
            delta = round((eps/average*100), 2)

            # –û–ø–µ—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–π –¥–ª—è –æ–∫—Ä—É–≥–ª–µ–Ω–∏—è –¥–æ 3 –∑–Ω–∞—á–∞—â–∏—Ö —Ü–∏—Ñ—Ä
            pos_avg = next(i for i, item in enumerate(str(average)) if item!="0" and item!=".") + 1
            pos_eps = next(i for i, item in enumerate(str(eps)) if item!="0" and item!=".") + 1
            average, eps = round(average, pos_avg), round(eps, pos_eps)
            await message.answer(f"–†–µ–∑—É–ª—å—Ç–∞—Ç –∏–∑–º–µ—Ä–µ–Ω–∏—è: \n"
                                 f"- <b><i>{average}+-{eps}</i></b>;\n"
                                 f"- —Å–ª—É—á–∞–π–Ω–∞—è –ø–æ–≥—Ä–µ—à–Ω–æ—Å—Ç—å: <b><i>{delta}%</i></b>",
                                 parse_mode="HTML")
            await state.clear()
        else:
            raise KeyError
    except ValueError:
        await message.answer("–í–≤–µ–¥–µ–Ω –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É.")
        return
    except KeyError:
        await message.answer("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–≤–æ–¥–∏–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–æ–ª–∂–Ω–æ "
                             "–±—ã—Ç—å –æ—Ç 2 –¥–æ 10. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É")
        return


@user.message(Command(commands=['rec']))
async def start_rec(message: Message, state: FSMContext):
    await state.clear()
    await message.answer("<b>–†–∞—Å—á–µ—Ç –æ–±—ä–µ–º–∞ –≤–µ—â–µ—Å—Ç–≤–∞ –¥–ª—è –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è —Ä–∞—Å—Ç–≤–æ—Ä–∞.</b>\n"
                         "–í—ã–±–µ—Ä–∏—Ç–µ –≤–µ—â–µ—Å—Ç–≤–æ",
                         reply_markup=await kb_user.substance_kb(),
                         parse_mode="HTML")


@user.callback_query(F.data.startswith("substance"))
async def substance_callback(call: CallbackQuery, state: FSMContext):
    substance = call.data.split("_")[1]
    A, B, M = DENSITY[substance]["A"], DENSITY[substance]["B"], DENSITY[substance]["M"]
    await state.update_data(A=A, B=B, M=M, substance=substance)
    await call.message.answer(
        f"–í—ã –≤—ã–±—Ä–∞–ª–∏ {substance}.\n"
        f"–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–ª–æ—Ç–Ω–æ—Å—Ç–∏ –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö"
        f"–æ—Ç <u>1 –¥–æ 1.2</u>(‚ùóÔ∏è)."
    )
    await state.set_state(st.SubstanceFSM.density)


@user.message(st.SubstanceFSM.density)
async def density_input(message: Message, state: FSMContext):
    try:
        density = float(message.text.replace(" ","").replace(",","").replace(",", "."))
        if density < 1 or density > 1.2:
            raise ValueError
        await state.update_data(density=density)
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –æ–±—ä–µ–º –∫–æ–ª–±—ã",
                             reply_markup=await kb_user.volumes_kb())
    except ValueError:
        await message.answer("–í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø–æ –æ–¥–Ω–æ–π –∏–∑ –ø—Ä–∏—á–∏–Ω:\n"
                             "- –í–≤–µ–¥–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–ª–æ—Ç–Ω–æ—Å—Ç–∏ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –∑–∞ –ø—Ä–µ–¥–µ–ª–∞–º–∏ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ 1-1.2;\n"
                             "- –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∑–Ω–∞—á–µ–Ω–∏—è –ø–ª–æ—Ç–Ω–æ—Å—Ç–∏."
                             "–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥.")


@user.callback_query(F.data.startswith("volumes") and st.SubstanceFSM.density)
async def volumes_callback(call: CallbackQuery, state: FSMContext):
    try:
        volume = int(call.data.split("_")[1])
        data = await state.get_data()
        A, B, M = data["A"], data["B"], data["M"]
        density = data["density"]
        procent = A + B * density

        # –†–∞—Å—á–µ—Ç –∏—Å—Ö–æ–¥–Ω–æ–π –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏–∏ –∏ –æ–±—ä–µ–º–∞
        c0 = (procent/100 * 1000 * density)/M
        await state.update_data(c0=c0, volume=volume)
        await call.message.answer("–í–≤–µ–¥–∏—Ç–µ —Ç—Ä–µ–±—É–µ–º—É—é –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—é")
        await state.set_state(st.SubstanceFSM.finish)
    except Exception:
        await call.answer("–í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞, –æ–ø–µ—Ä–∞—Ü–∏—è –ø—Ä–µ—Ä–≤–∞–Ω–∞")
        await state.clear()


@user.message(st.SubstanceFSM.finish)
async def substance_finish(message: Message, state: FSMContext):
    try:
        data = await state.get_data()
        substance, density = data["substance"], data["density"]
        c0, volume = data["c0"], data["volume"]
        c = float(message.text.replace(" ", ""). replace(",", "."))
        if c > c0:
            raise ValueError
        v0 = c * volume / c0
        pos_v0 = next(i for i, item in enumerate(str(v0)) if item != "0" and item != ".") + 1
        v0 = round(v0, pos_v0)
        await message.answer(f"–û–±—ä–µ–º <i>{substance}</i> –ø–ª–æ—Ç–Ω–æ—Å—Ç—å—é <i>{density}</i>, –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–π "
                             f"–¥–ª—è –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è —Ä–∞—Å—Ç–≤–æ—Ä–∞ —Å –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏–µ–π <i>{c}</i> –≤ –∫–æ–ª–±–µ <i>{volume} –º–ª</i> "
                             f"—Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç <b><i>{v0} –º–ª</i></b>.",
                             parse_mode="HTML")
        await state.clear()
    except ValueError:
        await message.answer("–ö–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—è —Ä–∞–∑–±–∞–≤–ª–µ–Ω–Ω–æ–≥–æ —Ä–∞—Å—Ç–≤–æ—Ä–∞ –Ω–µ –º–æ–∂–µ—Ç "
                             "–±—ã—Ç—å –≤—ã—à–µ –∏—Å—Ö–æ–¥–Ω–æ–π –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏–∏.\n"
                             "–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥.")
        return
    except Exception:
        await message.answer("–ù–µ–∫–æ—Ä—Ä–µ—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥")
        return

@user.message(Command(commands="test"))
async def test(message: Message):
    await db_reg.test_request()
    await message.answer("TEST")